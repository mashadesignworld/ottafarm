// expenses.tsx
"use client"
import { useState, useEffect } from 'react';

// 1. Define the TypeScript interface for your Expense model
interface Expense {
  id?: string; // Optional, as it's generated by MongoDB on creation
  category: string;
  subcategory?: string; // Optional field based on your JSON structure
  amount: number;
  currency: string;
  date: string; // ISO 8601 string (e.g., "2025-06-16T00:00:00Z")
  description: string;
  notes?: string;
  supplier?: string;
  paymentMethod?: string;
  flockId?: string;
  quantity?: number;
  unitOfMeasure?: string;
  unitCost?: number;
  isRecurring?: boolean;
  recurrenceInterval?: string;
  invoiceNumber?: string;
  receiptDocument?: string;
  location?: string;
  isTaxDeductible?: boolean;
  taxAmount?: number;
  status?: string;
  recordedBy?: string;
  createdAt?: string; // Handled by backend
  updatedAt?: string; // Handled by backend
}

const API_BASE_URL = 'http://localhost:5295/api/Expenses'; // Your backend API URL

export default function Expenses() {
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  // 2. Initialize newExpense state with all fields
  const [newExpense, setNewExpense] = useState<Omit<Expense, 'id' | 'createdAt' | 'updatedAt'>>({
    category: '',
    subcategory: '',
    amount: 0,
    currency: 'Kshs', // Default currency
    date: new Date().toISOString().split('T')[0], // Default to current date in YYYY-MM-DD for date input
    description: '',
    notes: '',
    supplier: '',
    paymentMethod: '',
    flockId: '',
    quantity: 0,
    unitOfMeasure: '',
    unitCost: 0,
    isRecurring: false,
    recurrenceInterval: '',
    invoiceNumber: '',
    receiptDocument: '',
    location: '',
    isTaxDeductible: false,
    taxAmount: 0,
    status: '',
    recordedBy: ''
  });

  // --- Function to Fetch All Expenses ---
  const fetchExpenses = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(API_BASE_URL);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data: Expense[] = await response.json();
      setExpenses(data);
    } catch (err) {
      console.error("Failed to fetch expenses:", err);
      setError("Failed to load expenses. Please check your backend connection.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchExpenses();
  }, []);

  // --- Function to Handle New Expense Creation ---
  const handleCreateExpense = async (e: React.FormEvent) => {
    e.preventDefault();

    // Prepare data to send - ensure correct types
    const dataToSend = {
      ...newExpense,
      amount: parseFloat(newExpense.amount.toString()), // Convert to number
      quantity: parseFloat(newExpense.quantity?.toString() || '0'), // Convert to number, handle optional
      unitCost: parseFloat(newExpense.unitCost?.toString() || '0'), // Convert to number, handle optional
      taxAmount: parseFloat(newExpense.taxAmount?.toString() || '0'), // Convert to number, handle optional
      isRecurring: Boolean(newExpense.isRecurring), // Convert to boolean
      isTaxDeductible: Boolean(newExpense.isTaxDeductible), // Convert to boolean
      date: new Date(newExpense.date).toISOString() // Convert to ISO string
    };

    try {
      const response = await fetch(API_BASE_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(dataToSend),
      });

      if (!response.ok) {
        const errorBody = await response.text(); // Read as text first to avoid JSON parsing errors
        throw new Error(`HTTP error! status: ${response.status}. Details: ${errorBody}`);
      }

      const createdExpense: Expense = await response.json();
      setExpenses([...expenses, createdExpense]); // Add new expense to the list
      setNewExpense({ // Reset form
        category: '', subcategory: '', amount: 0, currency: 'Kshs', date: new Date().toISOString().split('T')[0],
        description: '', notes: '', supplier: '', paymentMethod: '', flockId: '', quantity: 0,
        unitOfMeasure: '', unitCost: 0, isRecurring: false, recurrenceInterval: '', invoiceNumber: '',
        receiptDocument: '', location: '', isTaxDeductible: false, taxAmount: 0, status: '', recordedBy: ''
      });
      alert('Expense created successfully!');
      fetchExpenses(); // Re-fetch to ensure list is updated and ordered correctly
    } catch (err: any) {
      console.error("Failed to create expense:", err);
      setError(`Failed to create expense: ${err.message}`);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type, checked } = e.target as HTMLInputElement;
    setNewExpense(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  if (loading) return <p className='p-4 text-sm '>Loading expenses...</p>;
  if (error) return <p className="p-4 text-sm text-red-600">Error: {error}</p>;

  return (
    <div className="min-h-screen bg-gray-100 p-4 sm:p-6 lg:p-8 font-sans antialiased">
      
      <form onSubmit={handleCreateExpense} className="bg-white rounded-lg shadow-md p-6 max-w-4xl mx-auto mb-8 border border-gray-200">
        <h2 className="text-2xl font-bold text-red-500 mb-6 text-center">Otta Farm Expense Entry</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Basic Info Column */}
          <div className="space-y-4">
            {/* Category */}
            <div>
              <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">Category <span className="text-red-500">*</span></label>
              <input 
                type="text" 
                name="category" 
                id="category"
                value={newExpense.category} 
                onChange={handleInputChange} 
                required 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
            {/* Subcategory */}
            <div>
              <label htmlFor="subcategory" className="block text-sm font-medium text-gray-700 mb-1">Subcategory</label>
              <input 
                type="text" 
                name="subcategory" 
                id="subcategory"
                value={newExpense.subcategory || ''} 
                onChange={handleInputChange} 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
            {/* Amount */}
            <div>
              <label htmlFor="amount" className="block text-sm font-medium text-gray-700 mb-1">Amount <span className="text-red-500">*</span></label>
              <input 
                type="number" 
                name="amount" 
                id="amount"
                value={newExpense.amount} 
                onChange={handleInputChange} 
                required 
                step="0.01" 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
            {/* Currency */}
            <div>
              <label htmlFor="currency" className="block text-sm font-medium text-gray-700 mb-1">Currency <span className="text-red-500">*</span></label>
              <input 
                type="text" 
                name="currency" 
                id="currency"
                value={newExpense.currency} 
                onChange={handleInputChange} 
                required 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
            {/* Date */}
            <div>
              <label htmlFor="date" className="block text-sm font-medium text-gray-700 mb-1">Date <span className="text-red-500">*</span></label>
              <input 
                type="date" 
                name="date" 
                id="date"
                value={newExpense.date} 
                onChange={handleInputChange} 
                required 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
            {/* Description */}
            <div>
              <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">Description <span className="text-red-500">*</span></label>
              <textarea 
                name="description" 
                id="description"
                value={newExpense.description} 
                onChange={handleInputChange} 
                required 
                rows={3} 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
            {/* Notes */}
            <div>
              <label htmlFor="notes" className="block text-sm font-medium text-gray-700 mb-1">Notes</label>
              <textarea 
                name="notes" 
                id="notes"
                value={newExpense.notes || ''} 
                onChange={handleInputChange} 
                rows={3} 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
          </div>

          {/* Detailed Info Column */}
          <div className="space-y-4">
            {/* Supplier */}
            <div>
              <label htmlFor="supplier" className="block text-sm font-medium text-gray-700 mb-1">Supplier</label>
              <input 
                type="text" 
                name="supplier" 
                id="supplier"
                value={newExpense.supplier || ''} 
                onChange={handleInputChange} 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
            {/* Payment Method */}
            <div>
              <label htmlFor="paymentMethod" className="block text-sm font-medium text-gray-700 mb-1">Payment Method</label>
              <input 
                type="text" 
                name="paymentMethod" 
                id="paymentMethod"
                value={newExpense.paymentMethod || ''} 
                onChange={handleInputChange} 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
            {/* Flock ID */}
            <div>
              <label htmlFor="flockId" className="block text-sm font-medium text-gray-700 mb-1">Flock ID</label>
              <input 
                type="text" 
                name="flockId" 
                id="flockId"
                value={newExpense.flockId || ''} 
                onChange={handleInputChange} 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
            {/* Quantity */}
            <div>
              <label htmlFor="quantity" className="block text-sm font-medium text-gray-700 mb-1">Quantity</label>
              <input 
                type="number" 
                name="quantity" 
                id="quantity"
                value={newExpense.quantity || ''} 
                onChange={handleInputChange} 
                step="0.01" 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
            {/* Unit Of Measure */}
            <div>
              <label htmlFor="unitOfMeasure" className="block text-sm font-medium text-gray-700 mb-1">Unit Of Measure</label>
              <input 
                type="text" 
                name="unitOfMeasure" 
                id="unitOfMeasure"
                value={newExpense.unitOfMeasure || ''} 
                onChange={handleInputChange} 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
            {/* Unit Cost */}
            <div>
              <label htmlFor="unitCost" className="block text-sm font-medium text-gray-700 mb-1">Unit Cost</label>
              <input 
                type="number" 
                name="unitCost" 
                id="unitCost"
                value={newExpense.unitCost || ''} 
                onChange={handleInputChange} 
                step="0.001" 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
            {/* Invoice Number */}
            <div>
              <label htmlFor="invoiceNumber" className="block text-sm font-medium text-gray-700 mb-1">Invoice Number</label>
              <input 
                type="text" 
                name="invoiceNumber" 
                id="invoiceNumber"
                value={newExpense.invoiceNumber || ''} 
                onChange={handleInputChange} 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
            {/* Receipt Document URL */}
            <div>
              <label htmlFor="receiptDocument" className="block text-sm font-medium text-gray-700 mb-1">Receipt Document URL</label>
              <input 
                type="url" 
                name="receiptDocument" 
                id="receiptDocument"
                value={newExpense.receiptDocument || ''} 
                onChange={handleInputChange} 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
            {/* Location */}
            <div>
              <label htmlFor="location" className="block text-sm font-medium text-gray-700 mb-1">Location</label>
              <input 
                type="text" 
                name="location" 
                id="location"
                value={newExpense.location || ''} 
                onChange={handleInputChange} 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
          </div>

          {/* Checkbox / Other Info (Full Width) */}
          <div className="space-y-4 md:col-span-2 mt-4 pt-4 border-t border-gray-200">
            {/* Is Recurring? */}
            <div className="flex items-center gap-2">
              <input 
                type="checkbox" 
                name="isRecurring" 
                id="isRecurring"
                checked={newExpense.isRecurring} 
                onChange={handleInputChange} 
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" 
              />
              <label htmlFor="isRecurring" className="text-sm font-medium text-gray-700">Is Recurring?</label>
            </div>
            {newExpense.isRecurring && (
              <div>
                <label htmlFor="recurrenceInterval" className="block text-sm font-medium text-gray-700 mb-1">Recurrence Interval</label>
                <input 
                  type="text" 
                  name="recurrenceInterval" 
                  id="recurrenceInterval"
                  value={newExpense.recurrenceInterval || ''} 
                  onChange={handleInputChange} 
                  className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                />
              </div>
            )}
            {/* Is Tax Deductible? */}
            <div className="flex items-center gap-2">
              <input 
                type="checkbox" 
                name="isTaxDeductible" 
                id="isTaxDeductible"
                checked={newExpense.isTaxDeductible} 
                onChange={handleInputChange} 
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" 
              />
              <label htmlFor="isTaxDeductible" className="text-sm font-medium text-gray-700">Is Tax Deductible?</label>
            </div>
            {newExpense.isTaxDeductible && (
              <div>
                <label htmlFor="taxAmount" className="block text-sm font-medium text-gray-700 mb-1">Tax Amount</label>
                <input 
                  type="number" 
                  name="taxAmount" 
                  id="taxAmount"
                  value={newExpense.taxAmount || ''} 
                  onChange={handleInputChange} 
                  step="0.01" 
                  className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                />
              </div>
            )}
            {/* Status */}
            <div>
              <label htmlFor="status" className="block text-sm font-medium text-gray-700 mb-1">Status</label>
              <input 
                type="text" 
                name="status" 
                id="status"
                value={newExpense.status || ''} 
                onChange={handleInputChange} 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
            {/* Recorded By */}
            <div>
              <label htmlFor="recordedBy" className="block text-sm font-medium text-gray-700 mb-1">Recorded By</label>
              <input 
                type="text" 
                name="recordedBy" 
                id="recordedBy"
                value={newExpense.recordedBy || ''} 
                onChange={handleInputChange} 
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
            </div>
          </div>

          <button 
            type="submit" 
            className="w-full md:col-span-2 bg-red-600 text-white py-3 px-6 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 mt-6 text-lg font-semibold transition duration-150 ease-in-out"
          >
            Create Expense
          </button>
        </div>
      </form>

      <h2 className="text-2xl font-bold text-gray-800 mb-4 text-center mt-12">Existing Expenses</h2>
      {expenses.length === 0 ? (
        <p className="text-center text-gray-600">No expenses recorded yet. Add one above!</p>
      ) : (
        <ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto">
          {expenses.map((expense) => (
            <li key={expense.id} className="bg-white rounded-lg shadow-md p-6 border border-gray-200">
              <p className="text-sm text-gray-500 mb-2"><strong>ID:</strong> {expense.id}</p>
              <p className="text-gray-800 mb-1"><strong className="text-blue-700">Category:</strong> {expense.category} {expense.subcategory && `(${expense.subcategory})`}</p>
              <p className="text-gray-800 mb-1"><strong className="text-blue-700">Amount:</strong> {expense.currency} {expense.amount?.toFixed(2)}</p>
              <p className="text-gray-800 mb-1"><strong className="text-blue-700">Date:</strong> {expense.date ? new Date(expense.date).toLocaleDateString() : 'N/A'}</p>
              <p className="text-gray-800 mb-1"><strong className="text-blue-700">Description:</strong> {expense.description}</p>
              <p className="text-gray-800 text-sm mb-1"><strong>Notes:</strong> {expense.notes || 'N/A'}</p>
              {expense.supplier && <p className="text-gray-800 text-sm mb-1"><strong>Supplier:</strong> {expense.supplier}</p>}
              {expense.paymentMethod && <p className="text-gray-800 text-sm mb-1"><strong>Payment Method:</strong> {expense.paymentMethod}</p>}
              {expense.flockId && <p className="text-gray-800 text-sm mb-1"><strong>Flock ID:</strong> {expense.flockId}</p>}
              {expense.quantity && <p className="text-gray-800 text-sm mb-1"><strong>Quantity:</strong> {expense.quantity} {expense.unitOfMeasure}</p>}
              {expense.unitCost && <p className="text-gray-800 text-sm mb-1"><strong>Unit Cost:</strong> {expense.currency} {expense.unitCost?.toFixed(3)}</p>}
              {expense.isRecurring && <p className="text-gray-800 text-sm mb-1"><strong>Recurring:</strong> Yes ({expense.recurrenceInterval})</p>}
              {expense.invoiceNumber && <p className="text-gray-800 text-sm mb-1"><strong>Invoice No.:</strong> {expense.invoiceNumber}</p>}
              {expense.receiptDocument && <p className="text-gray-800 text-sm mb-1"><strong>Receipt:</strong> <a href={expense.receiptDocument} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">View Document</a></p>}
              {expense.location && <p className="text-gray-800 text-sm mb-1"><strong>Location:</strong> {expense.location}</p>}
              {expense.isTaxDeductible && <p className="text-gray-800 text-sm mb-1"><strong>Tax Deductible:</strong> Yes (Tax Amount: {expense.currency} {expense.taxAmount?.toFixed(2)})</p>}
              {expense.status && <p className="text-gray-800 text-sm mb-1"><strong>Status:</strong> {expense.status}</p>}
              {expense.recordedBy && <p className="text-gray-800 text-sm mb-1"><strong>Recorded By:</strong> {expense.recordedBy}</p>}
              <p className="text-xs text-gray-500 mt-2">
                Created: {expense.createdAt ? new Date(expense.createdAt).toLocaleString() : 'N/A'} <br/>
                Last Updated: {expense.updatedAt ? new Date(expense.updatedAt).toLocaleString() : 'N/A'}
              </p>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}